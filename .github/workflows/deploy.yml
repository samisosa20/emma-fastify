name: CI/CD Emma Backend Fastify

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"

      - name: Install Node.js dependencies
        run: |
          npm install # Instala las dependencias del proyecto

      - name: Run build
        run: |
          npm run build # Asumiendo que 'npm run build' compila tu aplicación Fastify (TypeScript)

  build-and-push:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/emma-fastify:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/emma-fastify:latest ${{ secrets.DOCKER_USERNAME }}/emma-fastify:${{ github.sha }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/emma-fastify:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/emma-fastify:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      # Conectar al servidor con SSH
      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }} # Asegúrate de que este usuario tenga permisos para Docker
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e

            CONTAINER_NAME=emma_fastify
            IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/emma-fastify:latest

            echo "=== Deteniendo y eliminando el contenedor actual ==="
            docker stop ${CONTAINER_NAME} || true
            docker rm ${CONTAINER_NAME} || true

            echo "=== Descargando la nueva imagen ==="
            docker pull ${IMAGE_NAME}

            echo "=== Ejecutando migraciones de base de datos (si aplica) ==="
            # Se asume que DATABASE_URL es un secreto de GitHub Actions
            # Este paso ejecuta un contenedor temporal solo para las migraciones
            docker run --rm \
              --name ${CONTAINER_NAME}_migrate \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              ${IMAGE_NAME} npm run migrate

            echo "=== Ejecutando el nuevo contenedor ==="
            docker run -d \
              --name ${CONTAINER_NAME} \
              -p 8010:8010 \
              -e NODE_ENV=production \
              -e PORT=8010 \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              # Agrega aquí otras variables de entorno necesarias para tu aplicación Fastify
              ${IMAGE_NAME}

            echo "=== Despliegue completado ==="
