generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(uuid())
  name                    String
  email                   String                   @unique
  confirmedEmailAt        DateTime?
  password                String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  tokenRecoveryPassword   String?
  phone                   String?
  phoneCode               String?
  badgeId                 String
  accounts                Account[]
  budgets                 Budget[]
  Category                Category[]
  events                  Event[]
  heritages               Heritage[]
  investments             Investment[]
  investmentAppreciations InvestmentAppreciation[]
  movements               Movement[]
  plannedPayments         PlannedPayment[]
  badge                   Badge                    @relation(fields: [badgeId], references: [id])

  @@index([badgeId], map: "User_badgeId_fkey")
}

model EmailConfirmationToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Account {
  id              String           @id @default(uuid())
  name            String
  description     String?
  badgeId         String
  initAmount      Decimal
  limit           Decimal
  typeId          String
  userId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  badge           Badge            @relation(fields: [badgeId], references: [id])
  type            AccountType      @relation(fields: [typeId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  movements       Movement[]
  plannedPayments PlannedPayment[]

  @@index([badgeId], map: "Account_badgeId_fkey")
  @@index([typeId], map: "Account_typeId_fkey")
  @@index([userId], map: "Account_userId_fkey")
}

model Category {
  id              String           @id @default(uuid())
  name            String
  description     String
  color           String           @default("#000000") @db.VarChar(10)
  icon            String?          @db.VarChar(100)
  groupId         String
  userId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  budgets         Budget[]
  GroupCategory   GroupCategory    @relation(fields: [groupId], references: [id], map: "Category_GroupCategory_FK")
  User            User             @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Category_User_FK")
  movements       Movement[]
  plannedPayments PlannedPayment[]

  @@index([groupId], map: "Category_GroupCategory_FK")
  @@index([userId], map: "Category_User_FK")
}

model AccountType {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
}

model GroupCategory {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[]
}

model Badge {
  id          String       @id @default(uuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  code        String
  symbol      String?      @default("$") @db.VarChar(5)
  flag        String?      @db.VarChar(50)
  accounts    Account[]
  budgets     Budget[]
  heritages   Heritage[]
  investments Investment[]
  users       User[]
}

model Event {
  id        String     @id @default(uuid())
  name      String
  endEvent  DateTime
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  movements Movement[]

  @@index([userId], map: "Event_userId_fkey")
}

model Investment {
  id             String                   @id @default(uuid())
  name           String
  initAmount     Decimal                  @db.Decimal(15, 2)
  endAmount      Decimal                  @db.Decimal(15, 2)
  badgeId        String
  dateInvestment DateTime                 @db.Date
  userId         String
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  deletedAt      DateTime?
  badge          Badge                    @relation(fields: [badgeId], references: [id])
  user           User                     @relation(fields: [userId], references: [id])
  appreciations  InvestmentAppreciation[]
  movements      Movement[]

  @@index([badgeId], map: "Investment_badgeId_fkey")
  @@index([userId], map: "Investment_userId_fkey")
}

model PlannedPayment {
  id          String    @id @default(uuid())
  accountId   String
  categoryId  String
  description String?
  amount      Decimal   @db.Decimal(15, 2)
  startDate   DateTime  @db.Date
  endDate     DateTime? @db.Date
  specificDay Int
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  account     Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([accountId], map: "PlannedPayment_accountId_fkey")
  @@index([categoryId], map: "PlannedPayment_categoryId_fkey")
  @@index([userId], map: "PlannedPayment_userId_fkey")
}

model Movement {
  id                       String      @id @default(uuid())
  accountId                String
  categoryId               String
  description              String?
  amount                   Decimal     @db.Decimal(15, 2)
  trm                      Decimal     @default(1.00000) @db.Decimal(15, 5)
  datePurchase             DateTime
  transferId               String?
  eventId                  String?
  investmentId             String?
  userId                   String
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt
  addWithdrawal            Boolean     @default(false)
  account                  Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category                 Category    @relation(fields: [categoryId], references: [id])
  event                    Event?      @relation(fields: [eventId], references: [id])
  investment               Investment? @relation(fields: [investmentId], references: [id])
  originalOrPairedMovement Movement?   @relation("MovementTransferPair", fields: [transferId], references: [id])
  relatedTransferMovements Movement[]  @relation("MovementTransferPair")
  user                     User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([accountId], map: "Movement_accountId_fkey")
  @@index([categoryId], map: "Movement_categoryId_fkey")
  @@index([eventId], map: "Movement_eventId_fkey")
  @@index([investmentId], map: "Movement_investmentId_fkey")
  @@index([transferId], map: "Movement_transferId_fkey")
  @@index([userId], map: "Movement_userId_fkey")
}

model Period {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  budgets   Budget[]
}

model Heritage {
  id              String   @id @default(uuid())
  name            String   @db.VarChar(100)
  comercialAmount Decimal  @db.Decimal(15, 2)
  legalAmount     Decimal  @db.Decimal(15, 2)
  badgeId         String
  year            Int
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  badge           Badge    @relation(fields: [badgeId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([badgeId], map: "Heritage_badgeId_fkey")
  @@index([userId], map: "Heritage_userId_fkey")
}

model InvestmentAppreciation {
  id               String     @id @default(uuid())
  investmentId     String
  amount           Decimal    @db.Decimal(15, 2)
  dateAppreciation DateTime   @db.Date
  userId           String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  investment       Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([investmentId], map: "InvestmentAppreciation_investmentId_fkey")
  @@index([userId], map: "InvestmentAppreciation_userId_fkey")
}

model Budget {
  id         String   @id @default(uuid())
  categoryId String
  amount     Decimal  @db.Decimal(15, 2)
  badgeId    String
  periodId   String
  year       Int
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  badge      Badge    @relation(fields: [badgeId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  period     Period   @relation(fields: [periodId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([badgeId], map: "Budget_badgeId_fkey")
  @@index([categoryId], map: "Budget_categoryId_fkey")
  @@index([periodId], map: "Budget_periodId_fkey")
  @@index([userId], map: "Budget_userId_fkey")
}

view vw_dailyexpensive {
  category     String
  icon         String?   @db.VarChar(100)
  color        String    @default("#000000") @db.VarChar(10)
  amount       Decimal?  @db.Decimal(37, 2)
  datePurchase DateTime? @db.Date
  badgeId      String
  userId       String
}

view vw_dailyincome {
  category     String
  icon         String?   @db.VarChar(100)
  color        String    @default("#000000") @db.VarChar(10)
  amount       Decimal?  @db.Decimal(37, 2)
  datePurchase DateTime? @db.Date
  badgeId      String
  userId       String
}

view vw_monthlyexpensive {
  category String
  icon     String?  @db.VarChar(100)
  color    String   @default("#000000") @db.VarChar(10)
  amount   Decimal? @db.Decimal(37, 2)
  year     Int?
  month    Int?
  badgeId  String
  userId   String
}

view vw_monthlyincome {
  category String
  icon     String?  @db.VarChar(100)
  color    String   @default("#000000") @db.VarChar(10)
  amount   Decimal? @db.Decimal(37, 2)
  year     Int?
  month    Int?
  badgeId  String
  userId   String
}

view vw_weeklyexpensive {
  category   String
  icon       String?  @db.VarChar(100)
  color      String   @default("#000000") @db.VarChar(10)
  amount     Decimal? @db.Decimal(37, 2)
  year       Int?
  weekNumber Int?
  badgeId    String
  userId     String
}

view vw_weeklyincome {
  category   String
  icon       String?  @db.VarChar(100)
  color      String   @default("#000000") @db.VarChar(10)
  amount     Decimal? @db.Decimal(37, 2)
  year       Int?
  weekNumber Int?
  badgeId    String
  userId     String
}

view vw_yearlyexpensive {
  category String
  icon     String?  @db.VarChar(100)
  color    String   @default("#000000") @db.VarChar(10)
  amount   Decimal? @db.Decimal(37, 2)
  year     Int?
  badgeId  String
  userId   String
}

view vw_yearlyincome {
  category String
  icon     String?  @db.VarChar(100)
  color    String   @default("#000000") @db.VarChar(10)
  amount   Decimal? @db.Decimal(37, 2)
  year     Int?
  badgeId  String
  userId   String
}

view vw_accountbalances {
  userId        String
  accountId     String
  name          String
  code          String
  flag          String?  @db.VarChar(50)
  symbol        String?  @default("$") @db.VarChar(5)
  totalAmount   Decimal?
  yearlyAmount  Decimal  @default(0.000000000000000000000000000000)
  monthlyAmount Decimal  @default(0.000000000000000000000000000000)
}

view vw_genneralbalances {
  badgeId String
  code    String
  flag    String?  @db.VarChar(50)
  symbol  String?  @default("$") @db.VarChar(5)
  amount  Decimal?
  userId  String
}

view vw_monthlycategorystats {
  userId            String
  categoryId        String
  categoryName      String
  code              String
  flag              String?  @db.VarChar(50)
  symbol            String?  @default("$") @db.VarChar(5)
  avgMonthlyIncome  Decimal? @db.Decimal(41, 6)
  incomeLowerLimit  Float?
  incomeUpperLimit  Float?
  avgMonthlyExpense Decimal? @db.Decimal(41, 6)
  expenseLowerLimit Float?
  expenseUpperLimit Float?
}

view vw_heritagebyyear {
  year   Int?
  code   String
  flag   String? @db.VarChar(50)
  symbol String? @default("$") @db.VarChar(5)
  amount Decimal @default(0.00) @db.Decimal(60, 2)
  userId String  @default("")
}
